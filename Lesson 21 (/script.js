'use strict'


/* 1 1. Задание: Напишите функцию fib(n), которая возвращает n-е число Фибоначчи. 

Последовательность чисел Фибоначчи имеет формулу Fn = Fn-1 + Fn-2. То есть, следующее число получается как сумма двух предыдущих.
Первые два числа равны 1, затем 2(1+1), затем 3(1+2), 5(2+3) и так далее: 1, 1, 2, 3, 5, 8, 13, 21....

Главное условие, чтобы функция работала быстро.*/

let n = prompt();

function fib(n) {
    let a = 1;
    let b = 1;
    for (let i = 3; i <= n; i++) {
      let c = a + b;
      a = b;
      b = c;
    }
    return b;
  }

fib(n);
  console.log( fib(n) );



/*  Дано число n=1000. Делите его на 2 столько раз, пока результат деления не станет меньше 50.
Посчитайте количество итераций, необходимых для этого (итерация - это проход цикла), и запишите его в переменную num.*/

let num = 0;
function count() {
    let o = 1000; 
  while ( true ){
    o = o / 2; 
    num++;
    if (o <= 50){
    return o
    }
  }
}

count();

console.log(num);


/*
. Создайте объект описывающий Заказ на сайте.
Создать можно любым из способов - даже просто написать консрукцию let obj = {...}. 
Главное учесть, что единицы измерения обычно не записываются в объект, а 
записываются просто цифры переведенные к общей единице измерения(например кг переводятся в граммы).

В нем должно храниться:
- Имя покупателя
- Телефон покупателя
- Адрес покупателя
- Общая сумма заказа
- Общий вес заказа
- Купленные товары:
1 товар - Чашка \ 100 грн. \ вес 200 грамм
2 товар - Ложка \ 30 грн. \ вес 100 грамм
3 товар - Чайник \ 550 грн. \ вес 2 кг
4 товар - Кружка \ 150 грн \ вес 400 грамм
*/


let order = {
  name: 'Alex',
  phone: '0661234567',
  address: 'Poltava',
  total: 375,
  'total weight': 5,
  'total order': {
      item1:{
          name: 'Чашка',
          cost: 100,
          weight: 0.2,
      },
      item2:{
          name: 'Ложка',
          cost: 30,
          weight: 0.1,
      },
      item3: {
          name: 'Чайник',
          cost: 550,
          weight: 2,
      },
      item4: {
          name: 'Кружка',
          cost: 150,
          weight: 0.4,
    }
  }

}


console.log(order);